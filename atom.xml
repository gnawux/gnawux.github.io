<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>我有分寸</title>
  <id>http://wangxu.me/</id>
  <updated>2016-06-28T10:16:15+08:00</updated>
  <subtitle>某创业公司的看门大爷</subtitle>
  <link href="http://wangxu.me/"></link>
  <author>
    <name>我有分寸</name>
  </author>
  <entry>
    <title>Kubernetes 新项目 Frakti</title>
    <updated>2016-06-28T10:08:08+08:00</updated>
    <id>tag:wangxu.me,2016-06-28:/hyper/2016/06/28/frakti/index.html</id>
    <content type="html">&lt;p&gt;简讯：昨晚，在 kubernetes 组织下，新建了一个 repo，名为 &lt;a href=&#34;https://github.com/kubernetes/frakti&#34;&gt;frakti [1]&lt;/a&gt;，标志着 hyperContainer 以最 k8s 地方式融入 k8s 的开始。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;frakti 一名是我起的，如各位所知，&lt;a href=&#34;https://en.wikipedia.org/wiki/Kubernetes#History&#34;&gt;kubernetes 一名来自于舵手的希腊文 κυβερνήτης [2]&lt;/a&gt; ，&#xA;同样 frakti 也来自于&lt;a href=&#34;https://el.wikipedia.org/wiki/%CE%A6%CF%81%CE%B1%CE%BA%CF%84%CE%AE_(%CE%BD%CE%B1%CF%85%CF%80%CE%B7%CE%B3%CE%AF%CE%B1&#34;&gt;与船相关的希腊文——水密隔仓 Φρακτή [3]&lt;/a&gt;)，&#xA;这是一种通过隔离舱室，提高船的抗沉性的结构，据说最早由中国宋朝的朱彧引入（&lt;a href=&#34;https://en.wikipedia.org/wiki/Bulkhead_(partition&#34;&gt;参见wiki[4]&lt;/a&gt;#History)），&#xA; 这样的名字，对于我们来自中国的 &lt;a href=&#34;https://github.com/hyperhq/hyperd&#34;&gt;hyperContainer [5]&lt;/a&gt; 团队与 kubernetes&#xA; 的结合可能再合适不过了。&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[1] &lt;a href=&#34;https://github.com/kubernetes/frakti&#34;&gt;https://github.com/kubernetes/frakti&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[2] &lt;a href=&#34;https://en.wikipedia.org/wiki/Kubernetes#History&#34;&gt;https://en.wikipedia.org/wiki/Kubernetes#History&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[3] &lt;a href=&#34;https://el.wikipedia.org/wiki/%CE%A6%CF%81%CE%B1%CE%BA%CF%84%CE%AE_(%CE%BD%CE%B1%CF%85%CF%80%CE%B7%CE%B3%CE%AF%CE%B1&#34;&gt;https://el.wikipedia.org/wiki/%CE%A6%CF%81%CE%B1%CE%BA%CF%84%CE%AE_(%CE%BD%CE%B1%CF%85%CF%80%CE%B7%CE%B3%CE%AF%CE%B1&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;[4] &lt;a href=&#34;https://en.wikipedia.org/wiki/Bulkhead_(partition)#History&#34;&gt;https://en.wikipedia.org/wiki/Bulkhead_(partition)#History&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[5] &lt;a href=&#34;https://github.com/hyperhq/hyperd&#34;&gt;https://github.com/hyperhq/hyperd&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</content>
    <link href="http://wangxu.me/hyper/2016/06/28/frakti/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>RunV: 让 Docker 支持虚拟化容器</title>
    <updated>2016-06-17T15:06:08+08:00</updated>
    <id>tag:wangxu.me,2016-06-17:/hyper/2016/06/17/runv-docker-integration/index.html</id>
    <content type="html">&lt;p&gt;在此，我们很高兴地告知各位，我们已经初步完成了 runV (OCI 的基于虚拟化技术的容器运行时引擎) 与 Docker 的集成。这里，我们感谢 runV 团队的优秀工作，而且这次更新的一个特别之处在于，这些更新是由 Hyper 的开发团队和来自社区的参与者共同完成的，他们也是 runV 社区的重要部分，并在此接受致谢。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;从去年夏末 OCI （开放容器促进组织）在 Linux 基金会下成立的时候起，Hyper 的 runV 就成为了 &lt;a href=&#34;https://github.com/opencontainers/runtime-spec/blob/master/implementations.md&#34;&gt;OCI 官方的基于虚拟化技术的容器运行时引擎实现[1]&lt;/a&gt;，而另一个基于容器的实现就是 Docker 的 runC。很久以来，大家都期盼着能用 Docker 命令行同时启动 runC 和 runV 容器，不过，由于 Docker 的执行引擎在按照他们的节奏向前推进，这个愿望一直未能实现。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;今年四月，&lt;a href=&#34;[https://blog.docker.com/2016/04/docker-engine-1-11-runc/&#34;&gt;docker 发布了 1.11，集成了 containerd，连接了 runC [2]&lt;/a&gt;，这为支持更多的 runtime 铺就了道路，于是，runV 与 Docker/Containerd 的集成就再次提上了台面。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;作为基于 hypervisor 的 OCI runtime，Hyper 的 runV 与 Docker 1.11+/Containerd 的集成工作是比较容易的，&lt;a href=&#34;https://github.com/hyperhq/runv#run-it-with-docker&#34;&gt;经过简单的调试，就可以让 Docker 和 containerd 直接对接到 runv 上[3]&lt;/a&gt;。但由于 containerd 是为 runC 量身定制的， runC本身也是一个不断改进中的实现，命令行会不断变化，并且包含一些专有的特性，这个集成有不少局限，对于 tty, exec, 网络等方面的支持仍有不足。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;不过，得益于 docker/containerd 提供的良好接口，我们给出了一个对 tty, exec, 网络等方面兼容性更好的过渡方案 —— 我们在 runv 中附带了 &lt;a href=&#34;[https://github.com/hyperhq/runv/blob/master/containerd/README.md&#34;&gt;runv-containerd 程序 [4]&lt;/a&gt;，基于 containerd并针对 hypervisor 进行了一些调整， 利用 runV ，现在 docker 可以直接创建功能齐备的虚拟化容器了。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# in terminal #1&#xA;runv-containerd --debug --driver libvirt --kernel /opt/hyperstart/build/kernel --initrd /opt/hyperstart/build/hyper-initrd.img&#xA;# in terminal #2&#xA;docker daemon -D -l debug --containerd=/run/runv-containerd/containerd.sock&#xA;# in terminal #3 for trying it&#xA;docker run -ti busybox&#xA;# ls   # (already in the terminal of the busybox container)&#xA;# exit # (quit the container)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;未来随着 OCI/containerd/runV 的进一步发展，相信我们还可以做到更好更完美的集成。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[1] &lt;a href=&#34;https://github.com/opencontainers/runtime-spec/blob/master/implementations.md&#34;&gt;https://github.com/opencontainers/runtime-spec/blob/master/implementations.md&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[2] &lt;a href=&#34;https://blog.docker.com/2016/04/docker-engine-1-11-runc/&#34;&gt;https://blog.docker.com/2016/04/docker-engine-1-11-runc/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[3] &lt;a href=&#34;https://github.com/hyperhq/runv#run-it-with-docker&#34;&gt;https://github.com/hyperhq/runv#run-it-with-docker&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[4] &lt;a href=&#34;https://github.com/hyperhq/runv/blob/master/containerd/README.md&#34;&gt;https://github.com/hyperhq/runv/blob/master/containerd/README.md&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/hyper/2016/06/17/runv-docker-integration/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>浮在天空里，有些话给你</title>
    <updated>2016-06-08T05:12:08+08:00</updated>
    <id>tag:wangxu.me,2016-06-08:/family/2016/06/08/for-dad/index.html</id>
    <content type="html">&lt;p&gt;爸爸：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2月9日，大年初二，你停下了脚步，而我们却渐行渐远。你是那个最疼我的人，我是你最后托付的人，我手上，你最后的温度不曾散释，我心里，你最后的话语萦绕未消。平日里，你好象仍然未曾远去，总觉的哪天我迈进家门，还能尝到你做的饭菜，我还会劝劝你少喝酒、少放油；而在飞机上的时候，我总觉的自己距离你更近了，几次在航班上泪流满面地回想和你在一起的点滴往事，从幼年的兔子和鹅，一直到高考时晚饭，再到五年前我从移动离职时你的话……这些，你也都不曾忘记，对么？&lt;/p&gt;&#xA;&#xA;&lt;p&gt;你离去已过百天，你最疼的屹长大了，学了新知识，学得更有自我意识了，偶尔骗骗我，把我气得半死，和我小时候一样；你那时候对我很宽容的，我们也会好好地爱他、引导他的。他偶尔也会不经意间提到你，但不会多说，他对你可能也无法释怀，你走了，这个小家伙一定很不开心。可爱的小诺诺也从刚两岁长到快两岁半了，不知道是不是感应，你发病前一天坚持想去接我和诺诺，那次没让你去，没想到就阴阳两隔了，而你离开的那天，小诺诺也高烧不退，痛苦之极；如今，她越来越懂事了，她出乎预料地不肯忘记你，你刚走那几天，她会指着很多东西说“是爷爷的”，而到最近，她还会提起“爷爷怎么不来啊，让爷爷也一起来吧”，“爷爷做菜好吃，让爷爷回来给我做菜吧”，每每引得妈妈潸然泪下。我曾经感伤“爱也会被遗忘”，有的时候却也想，遗忘可能也是对生者的保护，如果诺诺真能快点遗忘，妈妈可能也没这么伤心吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;说到妈妈，她还没有适应没有你的生活，没有你来给她拿主意，她似乎越来越不知道该走向哪里，我告诉她，她还可以有大约25年有质量的晚年生活，25年可以让一个婴儿成长到研究生毕业，可以和以往完全不同，可以活出更多精彩。我不知道她能听进去多少，她原来太依赖你来思考了，她不愿意接受别人的思想注入，不过我会尽力的，愿天空里的你也能帮助她度过难关。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;你走了，我也一夜长大，从前我在你的家庭里，营造我的小家庭，如今我也在家族里，试着和其他长辈们沟通，你离去的痛，和追加上的更多责任，让我更明白人生。我知道要关爱我的家庭，要关照妈妈，也要爱护自己。我会更加自律地生活，因为失去你的痛苦，让我知道，不要让爱我的人再那么早承受这份痛，相信我，我会尽力爱护你爱的人的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;飞机已经飞过中欧，快要到达此行的目的地了，快要和你告别了，我想和你分享一段最近注意到的《爱丽丝梦游仙境2》的台词：&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;曾经以为时间是个小偷，将我们拥有的一切都偷走，从不曾给我们机会。但我们错了，她总是先给予再拿走，每一天，每一分，每一秒，都是馈赠；时间教你接受一切，爱的人就在身边，请珍惜。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;你曾经和我一起相处过三十五年，为我付出过三十五年，一起快乐地度过了三十五年，我们一起走过乡间小道也一起飞在过蓝天之中，你自己在一直打拼，也鼓励我勇敢闯荡，如今你离开我了，我在你的注视下渐行渐远，我会把你一直放在心底，永远珍藏着那充满父爱的一分一秒。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;再见，爱你，虽然这句话你没有亲耳听到让我觉得有点遗憾。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;儿 旭&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2016年6月7日于英航BA38航班上&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/family/2016/06/08/for-dad/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>Hyper 一岁了</title>
    <updated>2016-05-25T20:06:08+08:00</updated>
    <id>tag:wangxu.me,2016-05-25:/hyper/2016/05/25/hyper-birthday/index.html</id>
    <content type="html">&lt;p&gt;今天一早，朋飞就告诉我们，我们和 Google 合作，发在 &lt;a href=&#34;http://blog.kubernetes.io/2016/05/hypernetes-security-and-multi-tenancy-in-kubernetes.html&#34;&gt;Kubernetes 官方博客上的文章&lt;/a&gt;终于上线了，张磊和朋飞，还有 Google Kubernetes 团队的 Dawn 等朋友忙活了这么久的一件事终于在今天有了结果。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;一篇文章用了这么久，有点超出我们的预期。不过，看看本文标题，今天刚好是我们向全世界宣布开始 &lt;a href=&#34;https://github.com/hyperhq/hyperd&#34;&gt;HyperContainer&lt;/a&gt; 这个开源项目一周年，这真是个让人惊喜的生日礼物呢！&lt;/p&gt;&#xA;&#xA;&lt;p&gt;一年前，我们忐忑地宣布了这个项目，那篇 blog 在 HackerNews 首页上停了几乎一整天，有人说，如果不算中国股市的话，这是中国人头一次在 HackerNews 首页上停这么久。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在过去的一年里，我们在 HyperContainer 之外，还发布了 RunV, Hypernetes 两个开源项目，并在上个月推出了我们的公有云服务 &lt;a href=&#34;https://www.hyper.sh&#34;&gt;Hyper_&lt;/a&gt;。这几个开源项目我都在之前的 Blog 里有过介绍，毋须多言，有兴趣的同学直接来&lt;a href=&#34;http://github.com/hyperhq/&#34;&gt;我们的 GitHub&lt;/a&gt; 看吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;就在刚刚，我 Tag 了 HyperContainer 项目的 0.6.0 版本，作为生日祝福送给我们项目自己，感谢开发团队的努力工作，不过我们没时间停下来，在接下来的两个月里，我们还有很多事情要做&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们的公有云项目将会有几个比较大的功能升级，就在未来的几个星期里逐步上线，GA 就在眼前，还请各位关注。&lt;/li&gt;&#xA;&lt;li&gt;我们的 HyperContainers 项目会在未来两个月里进一步完善 API、并稳定功能，大约在8月份达到 1.0 。&lt;/li&gt;&#xA;&lt;li&gt;我们的 Hypernetes 会和 Kubernetes 继续合作，大约在秋季的时候，Kubernetes 上游会有 HyperContainer Runtime 的集成。&lt;/li&gt;&#xA;&lt;li&gt;还有更多的进展会在未来几个月里逐步推进……&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;从发布到一岁，是漫长、艰辛而又兴奋的一个过程，未来更多挑战等着我们，让我们一起加油吧！&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/hyper/2016/05/25/hyper-birthday/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>Just for Fun</title>
    <updated>2016-04-16T18:18:08+08:00</updated>
    <id>tag:wangxu.me,2016-04-16:/life/2016/04/16/just-for-fun/index.html</id>
    <content type="html">&lt;p&gt;前两天，用友UDN的白总来找我做了一个关于开源创业的访谈，是啊，做&lt;a href=&#34;https://github.com/hyperhq/hyperd/&#34;&gt;Hyper_项目&lt;/a&gt;一年出头的时间了，自己想想也很刺激呢，那就动笔写点什么吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img data-src=&#34;http://7xpvay.com1.z0.glb.clouddn.com/e68a6670-06a1-11e6-94da-7347a1de0463&#34; alt=&#34;enter image description here&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这里引用上面图片里 Daocloud 联合创始人孙宏亮的一句话吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;做开源，辛苦有，好玩也有，今天就说点好玩的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;##开源的造神运动&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如果你有一点水平，开源对于树立个人威望是非常有好处的。正如西乔的BetaCat漫画道出的一个真谛——复杂 patch 是很少有人 review 的——只要你做了比较多的工作，那你就毫无疑问是个大牛了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;就拿我自己举例子吧，我自认为自己的水平还是有的，在看门大爷里也算是会写程序的了，还有点自己的小看法，但“大牛”还是差得很远的。这方面我觉得我老婆的眼光特别犀利客观，她一直就觉得我不过尔尔，哪天我敢在家得瑟，绝对被她扑灭，所以我仍然能看到自己的SB之处。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我说这些的意思并不是说开源圈很不堪，恰恰相反，我司活跃在开源社区的牛牛们就各个身手不凡，我所认识的那些大牛也真的让人高山仰止。我的意思是，即使一个如我这样的平凡人，参与开源，你也可以和这些真神们称兄道弟乃至于偷学两手，甚至像我这样出来装神弄鬼，这绝对是个捷径吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;##“敌我不分”的开源圈&lt;/p&gt;&#xA;&#xA;&lt;p&gt;开源项目有意思的一面就在于——它不是你一个人的，所以，开源前，它是你的兴趣，开源后就是整个社区的了，有点意思的项目，会有很多人来一起打理。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;国内容器圈是个不大不小的圈子，好几家创业公司，多少有点竞争关系，但是各位知道不，有两家容器创业公司的联合创始人都来给我们提过issue/PR，他们说，他们觉得这个项目有意思——难得有个国内创业公司做底层开源，他们也为此兴奋呢。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;##痛并快乐着&lt;/p&gt;&#xA;&#xA;&lt;p&gt;刚才说，项目开源了就不是自己的了，这也有一些“负面”作用，当你做一些大调整时，会有人站出来质疑你。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;比如因为我们上公有云，为避免命名上的混淆，我们调整了项目仓库的名字和文档URL，不仅有国内的林帆等熟人过来核实，更有人直接在GitHub上发issue抗议。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;诚然宝宝心里有不得不做的苦，自家孩子还被别人约束的委屈，但另一方面，有人有在关心你的一举一动，对于开源项目来说不正是它的存在感么。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如今的 hyper 的项目开源已经接近一年，有其他创业公司小伙伴的支持和参与，有另一些国外朋友使用和积极跟进，也有一些大公司，在开源界朋友的推动下来发PR贡献，更有日渐强大的团队推进开发，并让自己的产品运行在开源项目之上并回馈开源，作为一个开源项目，越来越成熟了。&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/life/2016/04/16/just-for-fun/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>不愿回忆，害怕忘记</title>
    <updated>2016-02-29T01:10:08+08:00</updated>
    <id>tag:wangxu.me,2016-02-29:/family/2016/02/29/forget-or-not/index.html</id>
    <content type="html">&lt;p&gt;不愿回忆，害怕忘记，这是一种会呼吸的痛。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;三七将至，爸爸离开这么多天了，生活其实没有什么大不同，就好象之前不在他身边的日子一样，好像第二天又会在他身边。只是偶尔神经会被触到，猛然感到一种压在胸口的痛感，久久无法释怀。理智如我，仍然在逃避回忆。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;母亲是个特别豁达的人，豁达到不可思议，甚至似乎我感性的妻子都比母亲更伤心。可是，当我看到早晨她哭过的双眼时，我知道她又回到回忆之中了。正如我无法释怀父亲最后的话，无法忘记他最后留给我的温度一样。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;虽然我在躲藏，可回忆却像开着的机器，趁我不注意，悄悄地反复播映。不止是我自己，身边的人也常在不经意间回忆起来。两岁的女儿并不知道发生了什么，但她会不时发现和爷爷有关的东西，说出“爷爷的”；二年级的儿子，也会在玩牌时脱口而出“爷爷教的”……&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我小心地留着相关的东西，像揭开伤口的痂一样，偷偷地回忆——虽然会痛，却也害怕忘掉，害怕失去他留给我的最后的印记。但时间还是会冲淡一切，看看儿子，已经不为失去爷爷而痛哭了；想想女儿，将来大概会完全不记得她一度最喜欢的爷爷了。爱也会被忘掉，每当想到这个残酷的事实时，都让我感到更加心碎。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在这里悄悄记下这些，也是我害怕忘记这份悲痛，曾经的爱与欢乐，曾经的痛与追思，希望这份情凝固在文字里，永不逝去。&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/family/2016/02/29/forget-or-not/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>送别父亲</title>
    <updated>2016-02-09T23:58:08+08:00</updated>
    <id>tag:wangxu.me,2016-02-09:/family/2016/02/09/bye-to-dad/index.html</id>
    <content type="html">&lt;p&gt;父亲已经离开快11个小时了，因为血氧下降嗜睡，他是睡着离开我们的，没有留下最后的一句话，于是，我家再也没人知道祖先是不是留下了什么宝藏了…&lt;/p&gt;&#xA;&#xA;&lt;p&gt;处理了一下午，又带着我的留恋，陪母亲绕北京转了一大圈，看了那些和我小时候和他在一起的生活有关的地方，心里真的真的很难离开他…&lt;/p&gt;&#xA;&#xA;&lt;p&gt;到家之后，我有点想问我儿子，他爸和我爸哪个好一点，不过实在没问出口，毫无疑问，他会说我爸比较好，因为他爸爸打过他屁股。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;父亲其实是一个有太多牵挂的人，他临走前还惦记着他的老母亲，他前几天还要看孙子孙女的照片。他想回家，他说他要死了，他想再回家一次，可是我们知道这已经做不到了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;父亲是一个极其讲义气的人，今天晚上，我通知了好多他的密友，其中有的是他的中学同学，有的是他刚参加工作时的同事。好多人得到消息的时候都失声了，我想他们也回想起了他们一起的岁月吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;可我一直相信，父亲最爱的人是我，不止是因为他为了我，在家再也不抽烟了，也不止是我进门忘叫他他就会气得牙疼，我仍然记得小时候，有天，爸爸和他的几个同学喝酒聊天，他在说他和D和L两位叔叔的区别——&lt;/p&gt;&#xA;&#xA;&lt;p&gt;他说，如果穷得快要饿死了，L叔叔会让他的儿子为了活下去而抢银行，D叔叔会让他的孩子守法地坚持，而他会让他的儿子留在家里，他去抢银行。今天，这个世界正式宣告，他抢银行未遂。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;——实际上，对今天，我的心理铺垫太多了，以至于我见到他的时候，都不那么悲痛了，我甚至在怀疑为什么我能这么冷血，可是，忽然有一刹那，我意识到到我是个可怜的没爸的孩子了，一下就无法控制情绪了。原来我只是反射弧比较长。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如果他爱谁会比爱我多一点，那一定只有我傻乎乎的儿子了，父亲入医院抢救前一天晚上，还不顾自己很疲劳，非要和孙子玩一会儿呢，他也是自从有了孙子开始才戒烟的。儿子还不明白这一切是怎么回事，但我也真不知道该怎么告诉他，爷爷再也不会陪他玩了——&lt;/p&gt;&#xA;&#xA;&lt;p&gt;今天我第二次情绪崩溃就是替儿子闺女选花篮的时候，在几位姑姑面前都无法控制自己的情绪了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这篇日志没有鸡汤结尾，没有啥结论和决心，只是记录我今天的心情，我并不是不能自拔，也不是不能理智看待，可是我真的没有爸爸了，我怎么才能平静接受啊…&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/family/2016/02/09/bye-to-dad/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>Hyper 0.5 Released</title>
    <updated>2016-02-06T08:08:08+08:00</updated>
    <id>tag:wangxu.me,2016-02-06:/container/2016/02/06/hyper-0-5/index.html</id>
    <content type="html">&lt;p&gt;今天上午，我 Tag 了 Hyper, runV, Hyperstart 三个项目的 v0.5.0 标签，发布了 0.5 版本，Release Note 是英文的，想着也该有个中文的发布声明，就动笔写了这篇 Blog，送给从此刻开始的春节假期，祝各位开发者们节日休息的好、运维们节日别接告警。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;从 0.4 到 0.5，经历了接近五个月，与之前的发布周期相比是长了些，但这五个月中，我们并没有闲着，作为一个开源项目，大家从 GitHub 项目的变更记录可以看到，我们一直在改进自己。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;同时，在这期间，我们还在去年10月末和11月初接连参加了 OpenStack Summit Tokyo 和 DockerCon EU。在会上，我们向世界宣告了我们的新项目——Hypernetes （曾用名 HyperStack）。这个项目以 Hyper 作为强隔离性的运行时；使用 Kubernetes 作为 Pod 调度引擎；利用 OpenStack 组件，以 Neutron 作为 SDN 解决方案，以 Cinder/Ceph 作为持久存储方案，也用 Keystone 作为认证授权中心。这些特性使 Hypernetes 成为一个多租户的 Kubernetes 发布版，吸引了诸多关注目光。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这里简单介绍一下 0.4 到 0.5 的变化，最明显的可能就是，对于 CentOS 和 Fedora 的用户，你们现在可以直接安装 RPM 包了（&lt;strike&gt;包好，包好……&lt;/strike&gt;），呃……为啥没有 deb？作为13年的 Debianer，我也很抱歉啊，其实，事实是，CentOS 7.x 的依赖需求情况比较特殊，所以我们专门 Build 了 RPM，当然，稍后我们也会提供 Deb 的，放心吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;从软件本身来说，最主要的是我们对 Hyper 的行为做了很多修复和改进，比如对&lt;code&gt;run&lt;/code&gt; 和 &lt;code&gt;exec&lt;/code&gt; 命令的返回值、运行时 tty 的行为、文件映射的行为、文件插入行为的完善和修复、以及很多稳定性的改进，测试方面也做了加强。在功能方面，主要的改进在于和 Neutron 的集成、和 Cinder 的 ceph volume 的集成等，细节方面，&lt;code&gt;run&lt;/code&gt; 命令增加了 &lt;code&gt;-t&lt;/code&gt; 参数标记是否有 tty 设备的区别，增加了 &lt;code&gt;logs&lt;/code&gt; 命令，再就是增加了 &lt;code&gt;libvirt&lt;/code&gt; driver，用户可以在 libvirt 中监控到 hyper 创建的虚拟机。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;最近也有一些译文把 Hypernetes 介绍给国内的朋友，感谢诸位的关注，是的，我们是一个由国内发起、开发团队主要在国内的开源项目。在此版本发布，也是春节来临之际，感谢开发团队们的努力工作，虽然大部分开发团队都是远程工作的，但这就是开源社区的一贯工作方式，我们的团队完全胜任这个工作方式，生产效率与集中工作相比好不示弱。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;0.5 版本的发布让 Hyper 更加接近了产品化，在接下来的时间里 Hyper 和 Hypernetes 都不会停下来，请大家期待我们不久后的下一次产品发布。谢谢大家！再祝各位春节快乐、少收报警！&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/container/2016/02/06/hyper-0-5/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>下个五年，还要有你</title>
    <updated>2016-01-29T00:44:08+08:00</updated>
    <id>tag:wangxu.me,2016-01-29:/family/2016/01/29/dont-give-up/index.html</id>
    <content type="html">&lt;p&gt;下一个五年，还希望有你。﻿&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我的第一个五年，差不多是在山西临汾度过的，父母都是山西插队的“知青”，那五年里，我的记忆只是片段而已，只依稀记得邻居家有个和我差不多大的小姐姐，还一起去公园玩、荡秋千。老爸当时从事建筑行业，常年出差在外，他总说我小时候喜欢在外面，下雨天也要出门，他就一手打着伞，一手抱我在外面。如今我有儿有女，发现我也是这样的，好像父亲都会这样吧。可我还是知道，老爸是真疼我的。﻿﻿&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我的第二个五年，回到北京上小学了，老爸逐渐离开了建筑行业，和我在一起的时间变多了，我却还没太多印象和他在一起玩过什么，只记得10岁的时候，他出差去齐齐哈尔，带我顺路去哈尔滨兆霖公园看了冰灯，回来的时候还带我坐了人生第一次飞机，印象里是一架麦道客机，发动机挂在机尾吊舱。老爸一心想让我涨涨见识，让我比他强。﻿﻿&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我的第三个五年，碌碌无为，这五年，我从10岁前的小瘦猴，一跃成为了小胖墩儿。别的小朋友得到了红白机，玩起了魂斗罗，我却从老爸那得到了一套兼容 Apple 的天坛学习机，学起了LOGO与BASIC，那时候就注定要做码农么… 这五年里，可惜的是我平时学习还不错，孩子也聪明、脑子快，可是小学考初中没考好，中考还没考好… 于是老爸花了三万六让我上了寄宿的高中，希望我能有点出息。﻿﻿&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我的第四个五年，从高中到大学，我给了老爸好大希望，离清华只有咫尺之遥，有多近呢，比北大线高3分，比清华线低五分，就这五分里，我最后一道物理题少看了一个“忽略摩擦力”的条件，倒数第三题洛伦兹力，把圆周长公式代成 πr^2了，毫无违和感吧，看我记多久就知道我悔多深了。老爸的心情也从天上掉下来，可他还怕我想不开，特地为我庆祝生日。这五年里还有一件让我记得的事就是，我有一次严重扁桃体发炎，从那之后，只要我在家，他就不会在家抽烟了，对烟民来说，这不容易吧。﻿﻿&lt;/p&gt;&#xA;&#xA;&lt;p&gt;接下来的第五个五年，我从大学到研究生，这一次终于没有考折，他也高兴得不行，就差焚香告慰先祖了。这几年里，我经常在图书大厦、海淀图书城和china-pub买书，老爸私下感到买书的开销好大，不过他从来没跟我表示过。后来，我决定读博，他这种连高中都没上过的人高兴得不行，完全没有阻止我这一傻X行为，唉… 这几年里，有次我问他，我找个外地人当女朋友怎么样，他说，外国的都行… 然后，不太久以后，我就带着我现在的老婆去我家去了。﻿﻿&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在我第六个五年里，在老爸心中比我重要的人终于出现了，就是我儿子，一个证明就是，我儿子出生以后，他完全戒烟了。这几年里我拿到博士学位，入职中国移动研究院，结了婚，（老婆）生了儿子，老爸老妈也搬到了天通苑的大房子，这里面，儿子一岁开始就跟着老爸老妈，而我们搬回城里，让工作更方便些，只是一周回去两次。那一段老爸带孙子带得很开心，不过也会为我回家没跟他请安生气得半宿睡不着，呵呵，他在我眼里已经不是那个三头六臂的终结者了，现在他是一个有点儿小心眼儿的老头了。﻿﻿&lt;/p&gt;&#xA;&#xA;&lt;p&gt;第七个五年里，我开始为自己的职业生涯寻找变数，我离开移动转投盛大云的时候，跟老爸说要去上海几个月，他立刻跟我说，年轻人就该到处闯闯… 呃… 我就去几个月，还回来呢… 这五年里，儿子回到市里来上幼儿园，老妈过来帮忙照顾，老爸并不常来，因为他舍不得天通苑的大房子，就是盼着我们经常带着他孙子过去。老妈说他身体不好，各种毛病，说实话，看起来没那么严重啊。后来一年，儿子上小学，我们再次搬家，老爸老妈也终于一起过来帮我们带儿子和闺女两个孩子了。两个孩子明显都更喜欢爷爷，老爸也喜欢孩子们，尤其喜欢大孙子。纵有很多磕磕碰碰，但团团圆圆的生活谁不喜欢，可是孩子们出生与长大，长辈们就在变老，眼见着第七个五年就过去了…﻿﻿&lt;/p&gt;&#xA;&#xA;&lt;p&gt;老爸和我都是八月份生日，狮子座，我出生的时候他30岁，他过了六个没有我的五年，又看着我过了七个五年，如今又一个五年开始了，坚强点老爸，坚持住，我们还要和孩子们一起走下去呢，像奶奶一样，看孙辈结婚生子，看生生不息﻿﻿﻿&lt;/p&gt;&#xA;&#xA;&lt;p&gt;下个五年，还要有你&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/family/2016/01/29/dont-give-up/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>关于 Unikernel，你注意到或没注意到的一些东西</title>
    <updated>2016-01-23T08:08:08+08:00</updated>
    <id>tag:wangxu.me,2016-01-23:/container/2016/01/23/unikernel-critics/index.html</id>
    <content type="html">&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;利益相关&lt;/strong&gt;（强行植入广告）：我们（Hyper）创业团队（也是开源项目）同样做了一种基于 Hypervisor 技术的容器解决方案，然而与 unikernel 不同的是，我们是面向通用的容器镜像的，可以直接运行已有镜像。在我看来，大部分人在热捧 unikernel 的时候，实际上他需要的是 Hyper 这样的技术。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;免责声明&lt;/strong&gt;：我所做的预测只对我自己负责，我们在用创造未来的方式来预测未来，并且有其他人与我们在一同来创造未来，我们坚信我们的预测是正确的。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;&lt;img data-src=&#34;/assets/unikernel-in-article.png&#34; alt=&#34;作为一个概念的 unikernel&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;新闻背景&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;前两天，&lt;a href=&#34;https://blog.docker.com/2016/01/unikernel/&#34;&gt;Docker 宣布收购了 Unikernel Systems&lt;/a&gt;，引起了朋友圈刷屏（比如&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzA5OTAyNzQ2OA==&amp;amp;mid=401469511&amp;amp;idx=1&amp;amp;sn=d4628798a25b2c28d6d0acc2edf85068&#34;&gt;这个&lt;/a&gt;和&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MjM5MDE2MTczMQ==&amp;amp;mid=401874323&amp;amp;idx=1&amp;amp;sn=9e78416191cb7b4b2cf04684b97d4750&#34;&gt;这个&lt;/a&gt;）。不过 Twitter 上还是有一些批评声音的，而且 Joyent 的 Bryan Cantrill 大神亲自向信众解释了&lt;a href=&#34;https://www.joyent.com/blog/unikernels-are-unfit-for-production&#34;&gt;为啥 unikernel 不适合于生产系统&lt;/a&gt;，当然，在存在利益相关这方面，他和我是一样的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在和一些技术圈的朋友讨论后，我发现有的朋友并不是很了解 unikernel 技术，只是听起来觉得很好。于是，昨天我在朋友圈里写了这么一段话&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;事实上，unikernel 和 docker image 都是对应用的一个静态封装，从很多种意义上说，unikernel 都是一个更精巧的封装，而 docker image 则是一种更简单、松散、或者说更通用的封装。对于每个人是不是有意义，这因人而异，历史上精巧专用的方案被简单而更具兼容性的方案打败的例子比比皆是。这里，很多人都忽视的一点就是，从 unikernel 的定义出发，就不存在一个 unikernel 可以适应多样的已有二进制程序。需要好好审视自己的应用场景，才知道这张旧船票能否登上你的客船&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;现在我在 Blog 里继续解释一下。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;插一句题外话， unikernel 是一类技术，并不只有 Unikernel Systems 一家拥有，有兴趣的同学可以看看 OSV，这个团队来自 Red Hat，头领是 KVM 的作者 Avi，是一个非常优秀而有执行力的团队。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;什么是 unikernel&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;根据 &lt;a href=&#34;https://en.wikipedia.org/wiki/Unikernel&#34;&gt;Wiki 定义&lt;/a&gt;，unikernel 是专用的、单一地址空间，将操作系统功能作为库调用的程序镜像。也就是说，做一个 unikernel 应用，可以不需要复杂、完整的操作系统，可以只包含需要的功能。想想这简直是小而美的微服务架构的终极追求。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Docker 镜像之所以为人们所称道的原因就在于它完整封装了应用环境，使得应用可以在不同的环境里无需修改直接运行，不用考虑 distro、依赖库之类的问题，而这里，unikernel 连 kernel 都一并打包了，只要放在 hypervisor 上即可运行，这种 portability 似乎是无与伦比的，另一方面，hypervisor 带来的隔离效果要比 linux container 更好，而且，去掉不必要功能后，unikernel 包含的可能含有漏洞的代码也会少，从安全的角度讲，你做得越少，你做错的也就越少，人们不禁赞叹，这真是终极的解决之道啊。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;不过，等等，这里似乎有点问题啊。单一地址空间、操作系统作为库，这样的话和传统的程序有点不一样啊，程序不是跑在 Linux kernel 上了，那么多进程调度谁来做？已有的程序和库怎么用呢？是的，这就是我所说的不存在可以直接适配多样的已有二进制程序的 unikernel，你需要为每个程序一切从头做起，做自己的 unikernel app。换一个角度说，实际上 unikernel 不是让你把你的已有程序和它依赖的 kernel 功能打包，相反，是提供一套工具，帮你把你的程序嵌入到内核里去，得到一个你自己的专有的内核，这要从源码出发，甚至进行一定的移植工作。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;所以，当我在看到这个新闻的时候，甚至在想，docker 这是要回到 PaaS 上去，放弃统一镜像，转而做源码级的服务么？&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;通用的 unikernel？&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;看到我前面的论述，有人会立刻说，把 init 程序，比如 systemd 甚至 Hyper 的 hyperstart 和 unikernel 打包，然后不就可以直接接入已有二进制程序直接，做成通用的 unikernel 了么？&lt;/p&gt;&#xA;&#xA;&lt;p&gt;可是，仔细看看啊各位，首先，从 API/ABI 的角度看，通用的 Unix 或者 Linux kernel 是建立在完整的系统调用集的基础上的，unikernel 通过将内核代码与 App 代码的耦合，放弃了对系统调用的提供。而一旦转而提供完整的 ABI 给应用，那么，和 Linux kernel 也就没有区别了。所以说，unikernel 在提供通用性和进行应用边界划分的时候，选择的不是一个更加普适的接口。或者说，当它转而通用地支持已有的二进制程序的时候，那么它重新变成 hyper 的解决方案，而不是 unikernel 了。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;Unikernel 化一个应用，你面对的问题&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;除了丧失二进制级的应用通用性之外，Unikernel 其实还面临着很多其他的问题：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;首先，你需要移植程序，相当于支持一个新的平台。各种 unikernel 技术多少都提供了和 libc 或 java 平台或其他语言环境一致性非常高的开发环境，方便用户的移植，然而，移植工作多少还是需要的。&lt;/li&gt;&#xA;&lt;li&gt;其次，如果你的应用本身是多线程或多进程的，需要考虑单一地址空间的限制，这不仅是程序语言方面的限制，有的时候也是架构或语义层面的影响。&lt;/li&gt;&#xA;&lt;li&gt;最后，如 Bryan Cantrill 所说，unikernel 程序实际是完全内核态程序，而且只有单一地址空间，这根本没法 debug 嘛，传统或现代的通用程序调试设施基本上都无法使用，连进程的概念都没有，这对开发和调试带来了极大的难度，显然并不是所有的应用开发者都能驾驭这样的应用的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;Unikernel 适用的场景有哪些&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;那么，什么应用需要这个场景呢？我个人认为，只有极端追求性能和小体积的场所，可以不惜代价地去做这种 unikernel，就此，很多人都觉得 IoT （物联网）似乎是最佳应用场景之一。我只想问，我们早年间在 4KB ROM，128B RAM 的限制下写的 51 单片机程序在算不算 unikernel 程序？&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你真的想要的是什么？&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;感谢各位看到这里，作为一篇到处植入广告的文章，能看到最后的都是真爱，所以，我就再插入一段广告吧。如果你的容器服务跑在可信任的环境里，性能是首要要求，那么基于 Linux Container 的 Docker 是你的首选；而如果要提供多租户的容器服务，或者容器里的应用不被完全信任（比如用于测试等用途），那么，基于 Hypervisor 的 Hyper 完全胜任这个环境。并且，两者使用完全相同的镜像，对大部分镜像来说（除了那些刻意放弃主机和容器之间隔离性的应用），Container 能跑的，Hypervisor 也同样能跑。&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/container/2016/01/23/unikernel-critics/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
</feed>