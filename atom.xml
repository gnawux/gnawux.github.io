<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>我有分寸</title>
  <id>http://wangxu.me/</id>
  <updated>2016-09-24T10:36:39+08:00</updated>
  <subtitle>某创业公司的看门大爷</subtitle>
  <link href="http://wangxu.me/"></link>
  <author>
    <name>我有分寸</name>
  </author>
  <entry>
    <title>Hyper_ GA &amp; Happy Birthday to Myself</title>
    <updated>2016-09-24T10:35:00+08:00</updated>
    <id>tag:wangxu.me,2016-09-24:/hyper/2016/08/13/hyper-ga/index.html</id>
    <content type="html">&lt;h2&gt;新闻一则: Hyper_ General Available&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;是的，经过大约 4 个月的从 Private Beta 到 Public Beta， Hyper_ (&lt;a href=&#34;https://www.hyper.sh&#34;&gt;www.hyper.sh&lt;/a&gt;) 终于 GA 了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;相对于之前的 Beta 服务，我们仍然保持了“云端的单机”这一基本设定，以“免编排”、“免运维”为己任；并加入了端口映射、卷数据初始化、最小64M内存的超小型容器等特性。当然，另一个提升就是，我们换用了新的硬件服务集群，不再使用生产于2009年，被我们废物利用的旧服务器了，性能上有了相当的保证。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;欢迎试用，目前的用户，注册送 20 刀余额，当然，不可提现。（IP地址 $1/月，最小的容器大约 $1.03/月，能用来做什么你懂的）&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;正文：发布当天的日记&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;img data-src=&#34;/assets/sofar.jpg&#34; alt=&#34;感觉身体被掏空&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;经过了无数天的开发和调试，参加了无数次的争论，GA 的一天终于临近了，对于发布的日子，我上周随口说了下周四——周四其实是个不错的发布日子，前面留足调试时间，后面又和周末保持了合适的距离，有足够的弹性。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;然而，就在这天临近的时候，我忽然注意到，周四是我的生日——虽然我是 Hyper_ 的联合创始人中最为年轻的，可是也已经36岁了——在自己生日发布服务，这未免太中二了一点吧。于是，我们决定在周四将系统准备就绪，而等到周五再进行系统服务的切换，这样，我们于北京时间8月12日傍晚，太平洋时间（夏令时）8月12日凌晨上线了 Hyper_ GA 的系统。周末里，随着 DNS 记录的传播等，Hyper_ 正在逐步迎接用户，并将在周一正式发布英文的新闻稿。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;周四的晚上，大家紧张地进行了最后的调试，晚上快接近稳定的时候，我在音箱里放出了这首歌——&lt;a href=&#34;http://music.163.com/#/song?id=422427950&#34;&gt;网易云音乐链接&lt;/a&gt;、&lt;a href=&#34;http://www.bilibili.com/video/av5512579/&#34;&gt;B站链接&lt;/a&gt;。一时间，大家都感觉自己被掏空了。&lt;/p&gt;&#xA;&#xA;&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;http://music.163.com/outchain/player?type=2&amp;id=422427950&amp;auto=1&amp;height=66&#34;&gt;&lt;/iframe&gt;&#xA;&#xA;&lt;h3&gt;去年今日&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;一年前的这会儿，我们刚刚拆分出 runV 并提交到 OCI、参加了 ContainerCon/LinuxCon/Xen Developer Summit，虽然当时尚没有决定要不要做一个 Cloud，但是，至少当时开了一个头——我们开始了 Hypernetes 项目，这个项目成为了今天的 Hyper_ Cloud 的基础。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这个项目最初叫 HyperStack，意欲表达 Hyper 与 OpenStack 的集成，不过后来，因为 kubernetes 在这个系统中的重要地位，我们创造了一个新名词——Hypernetes，这一命名方式相当受欢迎，后面跟了无数的致敬者。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;到了今年，我们团队甚至在 Kubernetes 的官方 Blog 上发布了一篇客座 Blog，来介绍 hypernetes。所有这些都源自一年前的决定。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;新宿之夜&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;去年10月底，东京品川，开了一年两度的 OpenStack Summit，在会上，我们第一次向人们介绍了 Hypernetes。展会之余的一天晚上，我和 Cofounder 两个人决定去新宿逛街——结果，俩人在新宿的一个咖啡馆吵了一晚上，要不要做自己的云服务，如果做，卖点是什么。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;话说做云，我一开始是拒绝的，作为盛大云的旧部，师承 UCloud 的季总、京东云的何总，回归美国的 Kelvin，以及刻通云的姜总，我深知做一个负责任的公有云是多么困难…… 不过，后来我终归还是被说服了——一来是因为，我们发现，在国外做其实比在国内做挑战略小一些，让不可能成为可能；二来，我也同意，如果我们不做，这个 startup 创立的开源项目可能永远只是个看上去很美却没人敢用的项目。于是，我们开始了……&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;本命年（+虎头蛇尾的结语）&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;2016年是我的本命年，36岁高龄的我继续担当我司的看门大爷兼CTO，传统上认为本命年是人生的一道坎。作为一个并不宿命论的人也不得不承认，今年对我的个人和家庭真的是多事之秋。（update: 发布之后又居然病倒了，连续四天39度+，不过还是幸存了下来）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;不过，值此身体被掏空的日子，虽然感到，也许三十六岁的我不能和三十四五时候一样连续不眠不歇，但如今的我更清楚自己的使命和方向，还有一群优秀的同伙，这也让我可以寄望这本命年成为突破之年，愿今年 &lt;a href=&#34;https://hyper.sh&#34;&gt;Hyper_&lt;/a&gt; Cloud 的发布也能让大家感受到 IaaS &amp;amp; CaaS 再次被重新定义，也请大家一起期待后面更多的创新和突破。&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/hyper/2016/08/13/hyper-ga/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>我眼中的（云计算）标准化</title>
    <updated>2016-07-24T02:08:08+08:00</updated>
    <id>tag:wangxu.me,2016-07-24:/cloud/2016/07/24/standardization/index.html</id>
    <content type="html">&lt;p&gt;感谢组织，大概2009年到2011年期间，我曾经做过一段中国移动云计算开源与标准化方面的协调人，也先后代表中国移动和盛大云计算参与了一些云计算相关的标准化工作，因此小有一些发言权。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;遥想当年，和领导兼合作伙伴、标准化所（现在是标准化院）的周主任一起聊标准化的时候，有一个深切的感触——表面上看，标准化工作就是在设置门槛来限制准入者，这些限制似乎就是标准化的商机所在。然而，更加高瞻远瞩的标准化工作者，并不仅仅把眼光停留在评测和准入机制上，他们会把产业的发展趋势、国家和社会的需求体现到标准当中去。这里不仅仅是让参与标准制定的人给后来人设置难度，让后进入行业的人达到门槛的要求；也会通过给出科学的评测体系，让参与者有可以比较和竞争的依据；更有施展的空间，让创新者可以在不设门槛的地方大胆突破，超越前人。也正因为如此，标准化工作对参与人员的大局观和技术的理解力都有非常高的要求，过度标准化和缺乏标准对产业的发展同样是有害的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;简单举一个例子，对于互联网的数据中心（IDC），制冷是一个很重要的能力，因为全速运转的计算机会释放大量的热能，所以高档 IDC 会有很好的制冷能力，让服务器们冷酷到底。然而，当我们制定云计算标准的时候，是不是要对服务商的数据中心制冷能力有要求呢？这就不一定了，看看先进的数据中心设计理念——他们通过良好的 IDC 散热设计、改进的电源系统、更高的耐热能力、以及优良的集群管理调度系统，可以让系统在更高的温度下，甚至是不使用空调的自然风制冷的情况下，都可以工作，从而在节约大量的能源的情况下，达到相同甚至更好的服务质量。如果我们的标准要求了制冷能力，那么，这样的先进设计反而会被拒之门外，就完全违背了产业的发展方向了；相反，如果我们把服务可用性作为一个标杆，把能效指标作为一个评测指标，那么，通过比较，我们就可以看到哪些是真的更有能力的服务商了。两厢比较，高下立现。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这只是一个简单的例子，我参与标准化的工作不算多，最近又接触了一些，有感而发，想把自己的一点心得分享给没怎么做过标准化工作的开源同仁。其实只要大家在做标准化的时候再站高一层，不局限在自己的公司视角，多想一想产业该如何发展，想一想我们对产业的责任，就知道该往什么方向努力、该回避什么东西了。&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;后记：其实标准化的意义在对等交互的场景特别突出——比如各种通信制式，而在计算机/云计算领域，大家更看重事实标准，开源在某种意义上说，是另一种标准化，有开放基金会背景的开源项目更是可以看作是代码/API形式的标准化。开源和标准化都是全社会的精神财富，而不仅仅是一个人、一个公司的，这一点，做开源和做标准化是非常类似的。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;</content>
    <link href="http://wangxu.me/cloud/2016/07/24/standardization/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>往事匆匆，来日茫茫，唯有你我，相伴久久</title>
    <updated>2016-07-08T12:08:08+08:00</updated>
    <id>tag:wangxu.me,2016-07-08:/family/2016/07/08/anniversary-9/index.html</id>
    <content type="html">&lt;p&gt;时间的鬼斧神工总是让人惊叹，一直觉得自己意气风发，可是在公司却像个看门大爷；一直觉得还在家庭生活的磨合期，可别人都在称赞我们儿女双全，两个孩子都在修剪玫瑰花束了。唉，我们不得不承认，已经结婚9年了。早上，我搬进卧室一从99朵玫瑰，告诉老婆今天是结婚纪念日，她惊愕地问今天是几号……&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img data-src=&#34;/assets/anniversary-9.jpg&#34; alt=&#34;九年纪念&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;9年前的今天，我们步入婚姻殿堂，很多亲友莅临；9年后的今天，当时的嘉宾好多还在我的朋友圈里，感谢他们与我们一起相伴走来；&lt;/p&gt;&#xA;&#xA;&lt;p&gt;9年前的今天，家族齐聚一堂，一起憧憬未来生活；9年后的今天，竟有亲人已然逝去，带给我们深深的伤感，也感谢他们曾与我们走过；&lt;/p&gt;&#xA;&#xA;&lt;p&gt;9年前的今天，每个人都说，“早生贵子啊”；9年后的今天，他们说，“你们好幸福啊，儿女双全”，感谢孩子们来到我们的生活中来，未来你们也要走自己的路；&lt;/p&gt;&#xA;&#xA;&lt;p&gt;9年前的今天，你我许下百年誓言；还好，9年后的今天，我们还在一起，继续着新婚的磨合期，我们每天的生活都是新的，唯有你我不变，相伴长长久久。&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/family/2016/07/08/anniversary-9/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>十八年前的那一次考试</title>
    <updated>2016-07-07T08:08:08+08:00</updated>
    <id>tag:wangxu.me,2016-07-07:/life/2016/07/07/exam-98/index.html</id>
    <content type="html">&lt;p&gt;十八年前，我十八岁，那年也有洪水，那年也有足球，那年法国队也表现不错，那年，我参加了高考。对称是我的最爱，这种人生的对称时刻，自然该写点东西记一下。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img data-src=&#34;/assets/france-98-r9.jpg&#34; alt=&#34;1998年，对于很多人的回忆都是苦涩的[1]&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;现在的年轻人可能不知道，十八年前的高考，是在7月份，而且有三天，那时候的北京，使用全国卷高考，而我，和今年谢工老师的公子一样，也在八一中学考点，而且，有那么点不尽如人意。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;十八年前的高考，本来一切波澜不惊，除了化学，都不怎么难，当然化学都是我的物理之外的第二强项，难，不怕。最后一天考物理，我头上方的电风扇不知怎么，呲哑哑响不停，似乎是什么不祥的预兆，不过，物理有什么可担心的么。然而，在最后一小时，一切都改变了。之后的十八年里，每次提到高考，我都会祥林嫂一样地重复这个故事——&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;比如我这个 SB，1998高考全国卷物理倒数第三道大题，洛沦兹力的符号推导题，圆周长公式代了 πr^2 进去，最后一道力学大题，少看了一个“摩擦力忽略不记”的条件，最后和清华线差5分。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;其实，每年高考都有一些失意的人，他们和我一样，自信有实力，可是偏偏强项发挥失常，以致前功尽弃，进而无法自拔。然而，时光荏苒而过，在工大和那么多同病相怜的孩子们一起，哭过以后，我们发现，其实，失常的都是强项，弱项哪有什么可以算得上失常的东西呢？&lt;/p&gt;&#xA;&#xA;&lt;p&gt;高考之前，我也考砸过，小学考初中、初中考高中，全没考好。但高考是不同的，因为高考之后，我才真的开始思考为什么没做好、怎么能做好，开始不把问题推卸给运气、命之类的玄学上，也不放在心理、状态这些不可控的东西上，于是我才有了一步步的好转，不管是性格还是临场状态都开始变好。我明白，人不怕犯错，怕不思考，怕重复犯错，怕一辈子学不会怎么面对。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;举两个例子，第一个例子是关于性格的，我小时候的同学和我大学以后的同学、同事对我的印象是截然不同的。小时候的我是个非常内向、不敢说话的孩子（，其实我现在仍然有与人交往的恐惧症，更喜欢和计算机交流），但我相信，要成功需要更主动、更自信，于是，大学一开始，我就努力塑造自己主动的形象。我找到的一个方法是，把自己不敢做的事情说出来，说自己要做，然后，在大家的目光下逼着自己做，不管是做课程实验、课程设计，还是小组演讲，我都推着自己向前，同学们居然真的相信我擅长这些了（当然，他们这帮老司机可能根本就是自己懒得干），于是我经常地有各种机会，大一暑假就可以进入实验室了。这之后，我一步步地让自己脸皮变厚，甚至工作第一年的年会上反串《色戒》的王家芝这个角色，在移动研究院一炮走红。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;第二个例子是，当我准备考研的时候，除了复习功课，我开始全面的思考考试这个过程，而不仅仅是知识本身。我注意到，我过去的考试失常时刻，经常发生在连续几天考试的最后阶段，这个时候，身体疲惫可能是原因之一，所以，我在考研之前三个月开始坚持每天跑步，提高自己的心肺功能，以更好的身体状态面对马拉松式的考试，而且告诉自己，考研的考试每场有三个小时，中间一定要申请出来上一次厕所，活动一下，调整一下状态。这些准备不一定真的对考试有很多影响，但是努力调整至少会让自己相信自己做好了一切准备，会让自己更有信心地发挥出自己的水平。配合一点运气，我考上了北邮张平老师的研究生（，顺便说，张老师旗下的 WTI 是我国最好的无线通信方面的实验室之一，顺便推荐&lt;a href=&#34;http://wangxu.me/tag/zhihu/index.html&#34;&gt;我的知乎回答系列&lt;/a&gt;，真的是通信为主的），而这些运气，我相信是我通过自己的努力换来的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;现在的我，算不上成功，不过至少没有在高考后沉沦，这是一篇淡淡的鸡汤，送给那些高考不得意的同学——不思考，只想着受完就完了，基本上等着的是下一次失败，只有面对+思考+改进，才能真的避免同样的挫折。你现在需要的不是等着运气的青睐，而是面对自己，审视自己，改变自己，高考就是一个从此改变自己的机会。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[1] 图片来源: &lt;a href=&#34;http://www.mirror.co.uk/sport/football/world-cup-2014/world-cup-unconscious-minutes-ahead-3667198&#34;&gt;http://www.mirror.co.uk/sport/football/world-cup-2014/world-cup-unconscious-minutes-ahead-3667198&lt;/a&gt;&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/life/2016/07/07/exam-98/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>Kubernetes 新项目 Frakti</title>
    <updated>2016-06-28T10:08:08+08:00</updated>
    <id>tag:wangxu.me,2016-06-28:/hyper/2016/06/28/frakti/index.html</id>
    <content type="html">&lt;p&gt;简讯：昨晚，在 kubernetes 组织下，新建了一个 repo，名为 &lt;a href=&#34;https://github.com/kubernetes/frakti&#34;&gt;frakti [1]&lt;/a&gt;，标志着 hyperContainer 以最 k8s 地方式融入 k8s 的开始。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;frakti 一名是我起的，如各位所知，&lt;a href=&#34;https://en.wikipedia.org/wiki/Kubernetes#History&#34;&gt;kubernetes 一名来自于舵手的希腊文 κυβερνήτης [2]&lt;/a&gt; ，&#xA;同样 frakti 也来自于&lt;a href=&#34;https://el.wikipedia.org/wiki/%CE%A6%CF%81%CE%B1%CE%BA%CF%84%CE%AE_(%CE%BD%CE%B1%CF%85%CF%80%CE%B7%CE%B3%CE%AF%CE%B1&#34;&gt;与船相关的希腊文——水密隔仓 Φρακτή [3]&lt;/a&gt;)，&#xA;这是一种通过隔离舱室，提高船的抗沉性的结构，据说最早由中国宋朝的朱彧引入（&lt;a href=&#34;https://en.wikipedia.org/wiki/Bulkhead_(partition&#34;&gt;参见wiki[4]&lt;/a&gt;#History)），&#xA; 这样的名字，对于我们来自中国的 &lt;a href=&#34;https://github.com/hyperhq/hyperd&#34;&gt;hyperContainer [5]&lt;/a&gt; 团队与 kubernetes&#xA; 的结合可能再合适不过了。&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[1] &lt;a href=&#34;https://github.com/kubernetes/frakti&#34;&gt;https://github.com/kubernetes/frakti&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[2] &lt;a href=&#34;https://en.wikipedia.org/wiki/Kubernetes#History&#34;&gt;https://en.wikipedia.org/wiki/Kubernetes#History&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[3] &lt;a href=&#34;https://el.wikipedia.org/wiki/%CE%A6%CF%81%CE%B1%CE%BA%CF%84%CE%AE_(%CE%BD%CE%B1%CF%85%CF%80%CE%B7%CE%B3%CE%AF%CE%B1&#34;&gt;https://el.wikipedia.org/wiki/%CE%A6%CF%81%CE%B1%CE%BA%CF%84%CE%AE_(%CE%BD%CE%B1%CF%85%CF%80%CE%B7%CE%B3%CE%AF%CE%B1&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;[4] &lt;a href=&#34;https://en.wikipedia.org/wiki/Bulkhead_(partition)#History&#34;&gt;https://en.wikipedia.org/wiki/Bulkhead_(partition)#History&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[5] &lt;a href=&#34;https://github.com/hyperhq/hyperd&#34;&gt;https://github.com/hyperhq/hyperd&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</content>
    <link href="http://wangxu.me/hyper/2016/06/28/frakti/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>RunV: 让 Docker 支持虚拟化容器</title>
    <updated>2016-06-17T15:06:08+08:00</updated>
    <id>tag:wangxu.me,2016-06-17:/hyper/2016/06/17/runv-docker-integration/index.html</id>
    <content type="html">&lt;p&gt;在此，我们很高兴地告知各位，我们已经初步完成了 runV (OCI 的基于虚拟化技术的容器运行时引擎) 与 Docker 的集成。这里，我们感谢 runV 团队的优秀工作，而且这次更新的一个特别之处在于，这些更新是由 Hyper 的开发团队和来自社区的参与者共同完成的，他们也是 runV 社区的重要部分，并在此接受致谢。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;从去年夏末 OCI （开放容器促进组织）在 Linux 基金会下成立的时候起，Hyper 的 runV 就成为了 &lt;a href=&#34;https://github.com/opencontainers/runtime-spec/blob/master/implementations.md&#34;&gt;OCI 官方的基于虚拟化技术的容器运行时引擎实现[1]&lt;/a&gt;，而另一个基于容器的实现就是 Docker 的 runC。很久以来，大家都期盼着能用 Docker 命令行同时启动 runC 和 runV 容器，不过，由于 Docker 的执行引擎在按照他们的节奏向前推进，这个愿望一直未能实现。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;今年四月，&lt;a href=&#34;[https://blog.docker.com/2016/04/docker-engine-1-11-runc/&#34;&gt;docker 发布了 1.11，集成了 containerd，连接了 runC [2]&lt;/a&gt;，这为支持更多的 runtime 铺就了道路，于是，runV 与 Docker/Containerd 的集成就再次提上了台面。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;作为基于 hypervisor 的 OCI runtime，Hyper 的 runV 与 Docker 1.11+/Containerd 的集成工作是比较容易的，&lt;a href=&#34;https://github.com/hyperhq/runv#run-it-with-docker&#34;&gt;经过简单的调试，就可以让 Docker 和 containerd 直接对接到 runv 上[3]&lt;/a&gt;。但由于 containerd 是为 runC 量身定制的， runC本身也是一个不断改进中的实现，命令行会不断变化，并且包含一些专有的特性，这个集成有不少局限，对于 tty, exec, 网络等方面的支持仍有不足。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;不过，得益于 docker/containerd 提供的良好接口，我们给出了一个对 tty, exec, 网络等方面兼容性更好的过渡方案 —— 我们在 runv 中附带了 &lt;a href=&#34;[https://github.com/hyperhq/runv/blob/master/containerd/README.md&#34;&gt;runv-containerd 程序 [4]&lt;/a&gt;，基于 containerd并针对 hypervisor 进行了一些调整， 利用 runV ，现在 docker 可以直接创建功能齐备的虚拟化容器了。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# in terminal #1&#xA;runv-containerd --debug --driver libvirt --kernel /opt/hyperstart/build/kernel --initrd /opt/hyperstart/build/hyper-initrd.img&#xA;# in terminal #2&#xA;docker daemon -D -l debug --containerd=/run/runv-containerd/containerd.sock&#xA;# in terminal #3 for trying it&#xA;docker run -ti busybox&#xA;# ls   # (already in the terminal of the busybox container)&#xA;# exit # (quit the container)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;未来随着 OCI/containerd/runV 的进一步发展，相信我们还可以做到更好更完美的集成。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[1] &lt;a href=&#34;https://github.com/opencontainers/runtime-spec/blob/master/implementations.md&#34;&gt;https://github.com/opencontainers/runtime-spec/blob/master/implementations.md&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[2] &lt;a href=&#34;https://blog.docker.com/2016/04/docker-engine-1-11-runc/&#34;&gt;https://blog.docker.com/2016/04/docker-engine-1-11-runc/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[3] &lt;a href=&#34;https://github.com/hyperhq/runv#run-it-with-docker&#34;&gt;https://github.com/hyperhq/runv#run-it-with-docker&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;[4] &lt;a href=&#34;https://github.com/hyperhq/runv/blob/master/containerd/README.md&#34;&gt;https://github.com/hyperhq/runv/blob/master/containerd/README.md&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/hyper/2016/06/17/runv-docker-integration/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>浮在天空里，有些话给你</title>
    <updated>2016-06-08T05:12:08+08:00</updated>
    <id>tag:wangxu.me,2016-06-08:/family/2016/06/08/for-dad/index.html</id>
    <content type="html">&lt;p&gt;爸爸：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2月9日，大年初二，你停下了脚步，而我们却渐行渐远。你是那个最疼我的人，我是你最后托付的人，我手上，你最后的温度不曾散释，我心里，你最后的话语萦绕未消。平日里，你好象仍然未曾远去，总觉的哪天我迈进家门，还能尝到你做的饭菜，我还会劝劝你少喝酒、少放油；而在飞机上的时候，我总觉的自己距离你更近了，几次在航班上泪流满面地回想和你在一起的点滴往事，从幼年的兔子和鹅，一直到高考时晚饭，再到五年前我从移动离职时你的话……这些，你也都不曾忘记，对么？&lt;/p&gt;&#xA;&#xA;&lt;p&gt;你离去已过百天，你最疼的屹长大了，学了新知识，学得更有自我意识了，偶尔骗骗我，把我气得半死，和我小时候一样；你那时候对我很宽容的，我们也会好好地爱他、引导他的。他偶尔也会不经意间提到你，但不会多说，他对你可能也无法释怀，你走了，这个小家伙一定很不开心。可爱的小诺诺也从刚两岁长到快两岁半了，不知道是不是感应，你发病前一天坚持想去接我和诺诺，那次没让你去，没想到就阴阳两隔了，而你离开的那天，小诺诺也高烧不退，痛苦之极；如今，她越来越懂事了，她出乎预料地不肯忘记你，你刚走那几天，她会指着很多东西说“是爷爷的”，而到最近，她还会提起“爷爷怎么不来啊，让爷爷也一起来吧”，“爷爷做菜好吃，让爷爷回来给我做菜吧”，每每引得妈妈潸然泪下。我曾经感伤“爱也会被遗忘”，有的时候却也想，遗忘可能也是对生者的保护，如果诺诺真能快点遗忘，妈妈可能也没这么伤心吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;说到妈妈，她还没有适应没有你的生活，没有你来给她拿主意，她似乎越来越不知道该走向哪里，我告诉她，她还可以有大约25年有质量的晚年生活，25年可以让一个婴儿成长到研究生毕业，可以和以往完全不同，可以活出更多精彩。我不知道她能听进去多少，她原来太依赖你来思考了，她不愿意接受别人的思想注入，不过我会尽力的，愿天空里的你也能帮助她度过难关。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;你走了，我也一夜长大，从前我在你的家庭里，营造我的小家庭，如今我也在家族里，试着和其他长辈们沟通，你离去的痛，和追加上的更多责任，让我更明白人生。我知道要关爱我的家庭，要关照妈妈，也要爱护自己。我会更加自律地生活，因为失去你的痛苦，让我知道，不要让爱我的人再那么早承受这份痛，相信我，我会尽力爱护你爱的人的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;飞机已经飞过中欧，快要到达此行的目的地了，快要和你告别了，我想和你分享一段最近注意到的《爱丽丝梦游仙境2》的台词：&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;曾经以为时间是个小偷，将我们拥有的一切都偷走，从不曾给我们机会。但我们错了，她总是先给予再拿走，每一天，每一分，每一秒，都是馈赠；时间教你接受一切，爱的人就在身边，请珍惜。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;你曾经和我一起相处过三十五年，为我付出过三十五年，一起快乐地度过了三十五年，我们一起走过乡间小道也一起飞在过蓝天之中，你自己在一直打拼，也鼓励我勇敢闯荡，如今你离开我了，我在你的注视下渐行渐远，我会把你一直放在心底，永远珍藏着那充满父爱的一分一秒。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;再见，爱你，虽然这句话你没有亲耳听到让我觉得有点遗憾。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;儿 旭&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2016年6月7日于英航BA38航班上&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/family/2016/06/08/for-dad/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>Hyper 一岁了</title>
    <updated>2016-05-25T20:06:08+08:00</updated>
    <id>tag:wangxu.me,2016-05-25:/hyper/2016/05/25/hyper-birthday/index.html</id>
    <content type="html">&lt;p&gt;今天一早，朋飞就告诉我们，我们和 Google 合作，发在 &lt;a href=&#34;http://blog.kubernetes.io/2016/05/hypernetes-security-and-multi-tenancy-in-kubernetes.html&#34;&gt;Kubernetes 官方博客上的文章&lt;/a&gt;终于上线了，张磊和朋飞，还有 Google Kubernetes 团队的 Dawn 等朋友忙活了这么久的一件事终于在今天有了结果。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;一篇文章用了这么久，有点超出我们的预期。不过，看看本文标题，今天刚好是我们向全世界宣布开始 &lt;a href=&#34;https://github.com/hyperhq/hyperd&#34;&gt;HyperContainer&lt;/a&gt; 这个开源项目一周年，这真是个让人惊喜的生日礼物呢！&lt;/p&gt;&#xA;&#xA;&lt;p&gt;一年前，我们忐忑地宣布了这个项目，那篇 blog 在 HackerNews 首页上停了几乎一整天，有人说，如果不算中国股市的话，这是中国人头一次在 HackerNews 首页上停这么久。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在过去的一年里，我们在 HyperContainer 之外，还发布了 RunV, Hypernetes 两个开源项目，并在上个月推出了我们的公有云服务 &lt;a href=&#34;https://www.hyper.sh&#34;&gt;Hyper_&lt;/a&gt;。这几个开源项目我都在之前的 Blog 里有过介绍，毋须多言，有兴趣的同学直接来&lt;a href=&#34;http://github.com/hyperhq/&#34;&gt;我们的 GitHub&lt;/a&gt; 看吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;就在刚刚，我 Tag 了 HyperContainer 项目的 0.6.0 版本，作为生日祝福送给我们项目自己，感谢开发团队的努力工作，不过我们没时间停下来，在接下来的两个月里，我们还有很多事情要做&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们的公有云项目将会有几个比较大的功能升级，就在未来的几个星期里逐步上线，GA 就在眼前，还请各位关注。&lt;/li&gt;&#xA;&lt;li&gt;我们的 HyperContainers 项目会在未来两个月里进一步完善 API、并稳定功能，大约在8月份达到 1.0 。&lt;/li&gt;&#xA;&lt;li&gt;我们的 Hypernetes 会和 Kubernetes 继续合作，大约在秋季的时候，Kubernetes 上游会有 HyperContainer Runtime 的集成。&lt;/li&gt;&#xA;&lt;li&gt;还有更多的进展会在未来几个月里逐步推进……&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;从发布到一岁，是漫长、艰辛而又兴奋的一个过程，未来更多挑战等着我们，让我们一起加油吧！&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/hyper/2016/05/25/hyper-birthday/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>[知乎回答] 如何评价 Hyper_</title>
    <updated>2016-05-20T10:08:08+08:00</updated>
    <id>tag:wangxu.me,2016-05-20:/zhihu/2016/05/20/how-about-hyper/index.html</id>
    <content type="html">&lt;p&gt;答案链接：&lt;a href=&#34;https://www.zhihu.com/question/35412725/answer/101715150&#34;&gt;https://www.zhihu.com/question/35412725/answer/101715150&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;为啥没人邀请我？虽然我在知乎上一直专注于无线通信相关问题，不过，我确实是 Hyper_ 的联合创始人和主要作者之一。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;前两天， Docker 的 @Honglin Feng 在某群里跟我说知乎的广告效果不错，我还说&#xA;“我都是回答的那些神马在学校的时候学的，没来得及忘掉，也不会用到的东西，废物利用”，&#xA;没想到今天就有人给我这个亲手打广告的机会，不由得还真是有点激动呢。而且这个题居然不是我们自己人提的，颇感意外啊。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;先从整体上说一下。刚才 @Gnep 提到，可以关注 &lt;a href=&#34;https://www.hyper.sh&#34;&gt;HYPER_&lt;/a&gt; 这个我们自己做的基于 HyperContainer 的容器云。&#xA;是的，提到我们 Hyper_ ，大致可以提两件事情 ——&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一是，我们的容器技术 HyperContainer，就是题主写到的“Make VM run like Container”，&#xA;或者叫“Secure as VM, Fast as Container”，这个我们是开源的，位于 &lt;a href=&#34;https://github.com/hyperhq/hyperd/&#34;&gt;Hyper_ · GitHub&lt;/a&gt; ，&#xA;简单地说是结合了 hypervisor 和 Docker Image 的一种更强调隔离的 App Container，和我们很相似的技术是 Intel 的 Clear Container，&#xA;我们是同一个星期 Release 的（2015年5月），并没有互相参考，思路暗合；&lt;/li&gt;&#xA;&lt;li&gt;二是基于我们的容器技术做的容器云 Hyper_ ( &lt;a href=&#34;https://www.hyper.sh&#34;&gt;https://www.hyper.sh&lt;/a&gt; )，因为我们的底层隔离了，上层可以做得更简洁，&#xA;完全去掉了一般公有服务里的基于虚机的资源池这一层，让用户可以像在一台无限大、永远在线的个人电脑上跑 Docker 一样，&#xA;直接创建并运行 Container。因为没有资源池这一层，需要初始化的东西很少，所以可以在三秒钟左右的时间里（&#xA;这个和 container 包含不包含额外的卷有关系，有额外的数据卷需要的时间要长一点）跑起一个虚拟机，&#xA;并且每个用户的网络和容器都是完全隔离、互不干扰的。而且，因为真的很快，所以秒级计费是有实际意义的哦。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;----&amp;gt;8------进入细节的分割线----&amp;gt;8------&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;以上和以下提到的 Docker 均为 Docker Inc 的商标，属于 Docker 公司的知识产权。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;首先从开源项目的由来说起，在最近的两三年中，容器成为云计算领域了最热门的话题。回顾历史，从 FreeBSD Jail&#xA;算起容器技术出现在 *nix 领域中已经发展了接近二十年了，致力于在操作系统中进行更强的运行时隔离。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;然而，Docker容器与以往不同，不仅在于运行时隔离，更在于对应用及其依赖环境的标准化封装，从而做到跨部署环境的不变性（immutable）&#xA;和一致性（consistency）。可以说，这是一种新型的应用容器。&#xA;这些应用容器对应用运维的方式带来了颠覆性的效果，然而，运行时容器技术并不足以面对多租户的环境。&#xA;Linus 在2015年的 LinuxCon 上也坦陈，安全性问题常常是个Bug的问题，而犯错不可避免，所以，要想达到好的安全性，&#xA;只靠安全加强是不够的，多一层的封装才是解决之道。在这种背景下，自然地期待保持应用容器的用法，引入虚拟化的强隔离。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;HyperContainer就是这样一种技术，结合了虚拟化的强隔离和容器的轻量级——Secure as VM, Fast as Container。&#xA;HyperContainer 并非是简单在虚机里放一个 Docker Daemon，而是用 hypervisor 替换掉了基于 namespace 的 runtime，&#xA;在虚机里面并没有 daemon，也没有完整的 guest distro，而是直接将 Docker Image 放在定制的 Guest Kernel&#xA;上执行的，所以可以做到很快。并且如其他的回答提到的，从用法上说，我们和 Docker 等容器技术是一致的。时间线大致如下——&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;我们从2015年初开始做这个项目&lt;/li&gt;&#xA;&lt;li&gt;2015年5月以开源项目的形式发布&lt;/li&gt;&#xA;&lt;li&gt;7月，随着 LinuxFoundation 宣布了开放容器促进组织，Hyper_ 将 HyperContainer 的运行时部分分离为 runV 项目，列为 OCI 的参考实现之一（runtime-spec/implementations.md at master · opencontainers/runtime-spec · GitHub）&lt;/li&gt;&#xA;&lt;li&gt;2015年10月，又发布了Hypernetes项目，结合了 HyperContainer 容器技术，Kubernetes 调度引擎以及OpenStack 的 Neutron 和 Cinder 等，成为一个多租户的 Kubernetes 发布。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;就社区而言，Hyper 作为一组中国人发起（但运行得略国际化）的开源项目，目前在国际上的影响还是略有一些的，除了上面提到的 OCI 之外，Hyper团队正在和 Kubernetes 社区积极合作，Kubernetes 已经计划在未来的版本中集成对 HyperContainer runtime 的支持；另一项由兄弟创业公司数人科技的 @肖德时 肖总推进，并有前阿里员工参与的工作（[MESOS-3435] Add containerizer support for hyper）正在将 HyperContainer runtime 集成到 Mesos 项目中去。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;----&amp;gt;8------关于 https://www.hyper.sh 云服务的分割线----&amp;gt;8------&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;目前的容器云服务有很多，大到 Google 的 GKE，新到国内的一系列云，但 Hyper_ 有所不同，大部分 Docker 用户都满意 Docker&#xA;的命令行用户体验，然而，部署成服务的时候，却需要先拥有一个虚机的资源池，并为这个资源池付费，而非实际跑的 Container。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;而 Hyper_ 是直接基于 HyperContainer 和 Hypernetes 项目的，Container 的运行时隔离由 HyperContainer&#xA;保障，网络隔离由 SDN 完成，我们还做了一个新的 Image/Container 存储引擎，让集群的分布式对用户完全透明，&#xA;所以，用户用起来和用自己的笔记本没什么不同，包括像 Docker Link 这样的功能我们也是提供了的，而且在命令行和 API&#xA;上都和 Docker 一致。如果说和 本机有什么不同的话，Hyper_ 上，用户可以直接给容器关联公网 IP，这是 Hypernetes&#xA;项目给我们带来的额外好处。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;从用户体验的角度看：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一是简单快速，没有多余的东西，虚机是什么鬼，cluster 是什么鬼，都不需要关心，更不用管调度器是土鳖还是高大上；&lt;/li&gt;&#xA;&lt;li&gt;二是随时起停，当起停的时间很短的时候，起停都不是负担，比如你在上面跑 s***socks 的时候，可以需要的时候跑，不需要的时候停，简单绿色、低碳生活；&lt;/li&gt;&#xA;&lt;li&gt;三是可以按需使用，用更少的资源更少的钱，完成恰如所需的任务，不用跑不需要的服务。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;当然，虽然我自己不太年轻了，但我们还是个年轻的开源项目、年轻的创业公司，项目还在快速发展，每天都有新的 PR 被 merge，&#xA;有新的功能改进和 bug fix；云上面，Compose 这些高级功能也很快就会提供。如果有问题，可以随时在 github 上 file issue 或联系我们。&lt;/p&gt;&#xA;</content>
    <link href="http://wangxu.me/zhihu/2016/05/20/how-about-hyper/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
  <entry>
    <title>[知乎回答] 哪些专业问题在本专业是常识，但在日常生活中却不被人所知？</title>
    <updated>2016-05-12T08:08:08+08:00</updated>
    <id>tag:wangxu.me,2016-05-12:/zhihu/2016/05/12/doppler/index.html</id>
    <content type="html">&lt;p&gt;回答链接：&lt;a href=&#34;https://www.zhihu.com/question/23421866/answer/90143146&#34;&gt;https://www.zhihu.com/question/23421866/answer/90143146&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;无线通信中的多普勒效应的影响。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;我被邀请过几次了，都是一个点上，人类跑得这么慢，高铁也比光慢这么多，这么点频移凭啥会影响通信质量啊。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;还是有很多同学表示这个解释太复杂看不明白，那么结论说在前面结论就是——速度越快，因为多普勒效应，同样带宽的信道受到的影响就越强，能达到的极限通信速率就越低，不仅时速300公里的高铁会有明显影响，时速100公里的汽车也会有。当然，影响高速移动通信的因素还不止多普勒，但多普勒的影响是非常显著的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;对无线通信专业的人来说，多径衰落和多普勒效应是物理层需要克服的最主要的两种信号衰落原因，而在 CDMA 中，因为 RAKE 接收机的使用，多径信号甚至可以成为增益，但多普勒频移带来的深衰落，和对信道估计的影响却是难以应付的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;铺垫一下一些时间的概念：3代CDMA类技术的物理层符号速率，又叫码片速率，是Mcps 级的，也就是每个码片的时间是小于 1 微秒的。3G和4G的无线帧的长度，也就是数据组织的单位，是毫秒到10毫秒级别的。码片那个位置不用4G举例子是因为从某种意义上说，4G OFDM 信号不是一个时间序列，而是一个频率序列，所以不太适合拿来举例子。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;简单解释下上面说的两种衰落的成因——&lt;/p&gt;&#xA;&#xA;&lt;p&gt;多径：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;信号不仅沿一条直射的线路到达接收机，也会从其他途径反射、绕射过来，&lt;/li&gt;&#xA;&lt;li&gt;这些不同的路径会有不同的衰减，因为路程不一样长，也会有不同的时延，&lt;/li&gt;&#xA;&lt;li&gt;这些多径信号的频率（在不考虑多普勒的情况下）都是一样的，它们叠摞在一起，到达接收机，并不会加强信号，而会让信号变乱。&lt;/li&gt;&#xA;&lt;li&gt;尤其是当没有直射径的时候，比如你抬头看，很可能由于建筑物或啥东西的阻挡，基站天线到你的手机之间是没有直接通路的，这时候不同的径信号都很差，互相干扰就更严重了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;多普勒效应：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一定速度的移动会造成信号产生频偏，但并不是说只是信号的中频平移以一点&lt;/li&gt;&#xA;&lt;li&gt;移动信号本身是一个频带，这个频带里，不同的频率会产生不同的频偏，多普勒效应让信号在频域“色散”了&lt;/li&gt;&#xA;&lt;li&gt;同时，因为有上面说的多径效应，不同的路径射入的方向是不同的，它们会产生不同强度乃至不同方向的频偏&lt;/li&gt;&#xA;&lt;li&gt;并且，即使发射机和接收机本身都不运动，传输过来的信号也可能被运动物体反射，还是会有多普勒效应&lt;/li&gt;&#xA;&lt;li&gt;当这些效应叠加在一起的时候，信号就已经衰落得很好看了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;我在另一个答案里，引用了来自：&lt;a href=&#34;https://link.zhihu.com/?target=http%3A//wenku.baidu.com/view/440d9299650e52ea551898d1.html%3Fre%3Dview&#34;&gt;多普勒效应与多径衰落对移动通信的影响&lt;/a&gt; 的几张图&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img data-src=&#34;/assets/doppler.png&#34; alt=&#34;doppler envelop&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;可以看到，时速100公里的信道条件，就比时速3公里的信号变化强烈多了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;而无线通信，收到信号的时候，需要“猜”出来发送时候的原始信号是什么样子的，这种猜有很多方法，比如，信号发送的慢一点，让接收方收集足够多信息得到高置信度的答案，或者，发送信号的功率高一些，让 1 和 0 的区别更明显一些。当然，由于发射机功率限制，信号功率不能太高，所以，条件越差的信道能传送的速率就越低。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;早年间的通信制式的信号传输速率是一定的，于是，只要在一定限制之内，运行速度高低对信号传输的影响似乎不大。但在新的制式里，为了达到更高的传输速率，系统会对信道的好坏程度做估计，当信道情况好的时候，可以尽力更快地传送。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这里提到了“信道估计”的概念，信道估计可以通过误码率来大致的猜，但是，一种更“激进”的方法是使用“训练序列”，大致思路是这样的：假设在很短的时间内信道状态是稳定的，观察训练序列发生了什么样的扭曲，那么，有用的信号应该也是这么扭曲的，那么我再把它变回来好了。我们在一些制式里使用了这个方案，在这种情况下，只要信道确实如假设般，在刚才提到的毫秒级的无线帧长度里，基本稳定，即使信道确实让信号发生了不小的畸变，都可以高置信度地还原用户数据。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这里，就涉及到多普勒效应的影响了，看上面的图，在低速的时候，信道条件变化更为缓慢，信道估计工作良好，速度一提高，信道随时间变化加快，信道估计就可能无法很好工作了，于是，在高铁上，虽然一般并不是完全无法传输无线数据了，但是可以传输的数据降低了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;所有这些知识，对无线通信方面的研究生来说，都是基础课，并不高深，多普勒效应也离大家的生活并不远，你们的手机每时每刻都在和多普勒效应做斗争。要了解更多的知识，可以看任意的无线通信原理类的教材，我当年用的是 Rapport 的 wireless communications: principles and practice，中文名应该是《无线通信：原理与应用》，关于无线通信低两层的知识，从物理层信道、调制解调到蜂窝网络之类的，这本书都介绍得比较详细，有兴趣的同学看看吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;附另一个回答 &lt;a href=&#34;https://www.zhihu.com/question/21669345/answer/19106242&#34;&gt;乘高铁无线网速慢是为什么？&lt;/a&gt;:&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;至少有两个原因：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多普勒效应：因为手机上网是走的无线信号，当有运动的时候，电磁波会产生多普勒效应，简单地说就是信号的频率会随着速度而改变，这造成了信道条件变差，误码率提高，从而降低了传输效率。&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当然，这么说有个前提，3G的通信质量和信道条件关系是很密切的，因为3G、4G这些更新的无线通信制式，之所以能够达到更高的通信容量，靠得就是压榨信道的承载力，在单位频谱上，容纳更多的比特速率，信道好可以HSPA高速传输，信道不好，即使 384kbps 也很难保证。&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;频繁的小区切换/重选：&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;背景：移动通信系统又称为蜂窝系统，在地理上将空间划分为一个个蜂窝状区域（这是理想情况，实际不是那么规矩的），因为电磁波本身随着距离而减弱，一个小区的信号不会强烈干扰到很远小区的通信，所以可以重用资源，从而达到有限的频谱空间服务大量的用户这一目的。&lt;/li&gt;&#xA;&lt;li&gt;问题：但是，高速移动的列车会快速地从一个小区穿行到下一个，于是，手机也得跟着不断地进行变换所在的小区，这个对于正在打电话的终端叫切换，其他的叫重选，都会造成很多开销，这样，可以用于通信的资源就少了。&lt;/li&gt;&#xA;&lt;li&gt;你可能会问，把服务铁路的小区做大点不就好了么，事实上服务铁路和高速公路的基站的覆盖区域本身就比较大。但是，发射功率受制于终端，谁都不想被手机烤熟了不是，嗯，手机也没这么多电；而且，一个基站能用的频谱资源有限，能服务的用户有限，覆盖范围大了，每个用户能得到的资源就更少了，速度也因此受限了。&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;除此之外，即使一车不开着，可能上网也不会太快，毕竟车上人多，共享无线信道，条件再好，那么多人分也好不到哪去了，肯定和人少信号好的地方没法比&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;</content>
    <link href="http://wangxu.me/zhihu/2016/05/12/doppler/index.html"></link>
    <author>
      <name>gnawux</name>
    </author>
  </entry>
</feed>